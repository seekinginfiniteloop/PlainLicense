import { cssModulesPlugin } from "@asn.aeb/esbuild-css-modules-plugin";
import * as esbuild from "esbuild";

export interface MetaFileOutputs {
  bytes: number;
  inputs: { [path: string]: { bytesInOutput: number } };
  exports: string[];
  entryPoint?: string;
}

export type GlobbedPaths = {
  [key in "styleSheets" | "scripts" | "fonts" | "images"]: string[];
} ;

export const paths: GlobbedPaths =
{
  "styleSheets": [
    "src/stylesheets/palette.scss",
    "src/stylesheets/main.scss",
    "src/stylesheets/colors.css",
    "src/stylesheets/extra.css",
    "src/stylesheets/license.css",
    "src/stylesheets/home.css",
    "src/stylesheets/heroimages.css"
  ],
  "scripts": [
    "src/javascripts/bundle.ts",
    "src/javascripts/index.ts"
  ],
  "fonts": [
    "src/fonts/*.woff",
    "src/fonts/*.woff2",
  ],
  "images": [
    "src/images/hero/**/*.avif",
    "src/images/*.svg",
    "src/images/*.png"
  ]
}

const jsBanner = `/**
 * ---DO NOT EDIT THIS FILE---
 * it is generated by the build process
 * instead edit the source file
 *
 * main site sources are in src/javascripts directory
 **
`
const cssBanner = `/**
  * ---DO NOT EDIT THIS FILE---
  * it is generated by the build process
  * instead edit the source file
  *
  * sources are in src/stylesheets directory
  *
  **
`

const ciBanner = `/**
  * ---DO NOT EDIT THIS FILE---
  * it is generated by the build process
  * instead edit the source file
  *
  * sources are in .github/src directory
  **
  `

export const webConfig: esbuild.BuildOptions = {
  bundle: true,
  minify: true,
  sourcemap: true,
  metafile: true,
  banner: { js: jsBanner, css: cssBanner },
  format: "esm",
  platform: "browser",
  target: "es2018",
  outbase: "docs/assets/",
  chunkNames: "chunks/[name].[hash]",
  assetNames: "[name].[hash]",
  outdir: "src",
  loader: {
    ".js": "js",
    ".ts": "ts",
    ".tsx": "tsx",
    ".css": "css",
    ".scss": "css",
    ".sass": "css",
    ".woff": "file",
    ".woff2": "file",
    ".png": "file",
    ".svg": "file",
    ".webp": "file",
    ".avif": "file",
  },
  outExtension: {".js": ".mjs"},
  allowOverwrite: true,
  splitting: true,
  plugins: [
    cssModulesPlugin({
      emitCssBundle: {
        path: "stylesheets",
        filename: "bundle.css",
      },
    }),
  ],
};

export const nodeConfig: esbuild.BuildOptions = {
  loader: webConfig.loader,
  format: "esm",
  bundle: true,
  metafile: false,
  banner: { js: ciBanner },
  platform: "node",
  target: "node18",
  sourcemap: false,
  minify: false,
  splitting: false,
  plugins: [],
  allowOverwrite: true,
  outExtension: {'.js': '.mjs'}
};

export interface Project {
  entryPoints: string[];
  entryNames?: string;
  outdir?: string;
  tsconfig: string;
  platform?: "node" | "browser";
}

export const GHActions: Project[] = [
  {
    // Build GitHub actions
    entryPoints: [".github/src/generate-changelog.ts"],
    entryNames: "[dir]/[name]",
    outdir: ".github/scripts",
    tsconfig: ".github/tsconfig.json",
    platform: "node",
  },
];

const baseConfigEntryPoints: string[] = []
for (const key in paths) {
  baseConfigEntryPoints.push(...paths[key as keyof GlobbedPaths])
}

export const baseProject: Project = {
  entryPoints: baseConfigEntryPoints,
  tsconfig: "tsconfig.json",
  entryNames: "[dir]/[name].[hash]",
  platform: "browser",
  outdir: "docs/assets",
};
