import { cssModulesPlugin } from "@asn.aeb/esbuild-css-modules-plugin";
import { copy } from 'esbuild-plugin-copy';
import { globby } from "globby";
/**
 * Resolves a glob to a single file.
 * @function
 * @param glob - The glob to resolve.
 * @returns A promise that resolves to the first file that matches the glob.
 */
async function getHeroParents() {
    const fastGlobSettings = { onlyDirectories: true };
    return await globby("src/images/hero/*", fastGlobSettings);
}
/**
 * Resolves a glob to a single file.
 * @function
 * @param glob - The glob to resolve.
 * @returns An array of files that match the glob.
 */
export const heroParents = getHeroParents();
const jsBanner = `/**
 * ---DO NOT EDIT THIS FILE---
 * it is generated by the build process
 * instead edit the source file
 *
 * main site sources are in src/javascripts directory
 */
`;
const cssBanner = `/**
  * ---DO NOT EDIT THIS FILE---
  * it is generated by the build process
  * instead edit the source file
  *
  * sources are in src/stylesheets directory
  *
  */
`;
const ciBanner = `/**
  * ---DO NOT EDIT THIS FILE---
  * it is generated by the build process
  * instead edit the source file
  *
  * sources are in .github/src directory
  */
  `;
export const webConfig = {
    bundle: true,
    minify: true,
    sourcemap: true,
    metafile: true,
    banner: { js: jsBanner, css: cssBanner },
    format: "esm",
    platform: "browser",
    target: "es2018",
    outbase: "src",
    chunkNames: "chunks/[name].[hash]",
    assetNames: "[dir]/[name].[hash]",
    outdir: "docs/assets",
    loader: {
        ".js": "js",
        ".ts": "ts",
        ".tsx": "tsx",
        ".css": "css",
        ".scss": "css",
        ".sass": "css",
        ".woff": "file",
        ".woff2": "file",
        ".png": "file",
        ".svg": "file",
        ".webp": "file",
        ".avif": "file",
    },
    outExtension: { ".js": ".js", ".css": ".css" },
    allowOverwrite: true,
    splitting: true,
    plugins: [
        cssModulesPlugin({
            emitCssBundle: {
                filename: "bundle.css",
            },
        }),
        copy({
            watch: true,
            verbose: true,
            resolveFrom: "cwd",
            assets: [
                { from: "./src/images/*.svg", to: "./docs/assets/images/*.svg" },
                { from: "./src/images/*.png", to: "./docs/assets/images/*.png" },
            ],
        }),
    ],
};
export const nodeConfig = {
    loader: webConfig.loader,
    format: "esm",
    bundle: true,
    metafile: false,
    banner: { js: ciBanner },
    platform: "node",
    target: "node18",
    sourcemap: false,
    minify: false,
    splitting: false,
    plugins: [],
    allowOverwrite: true,
    outExtension: { '.js': '.mjs' }
};
export const GHActions = [
    {
        // Build GitHub actions
        entryPoints: [".github/src/generate-changelog.ts"],
        entryNames: "[dir]/[name]",
        outdir: ".github/scripts",
        tsconfig: ".github/tsconfig.json",
        platform: "node",
    },
];
export const baseProject = {
    entryPoints: [
        "./src/javascripts/index.ts",
        "./src/stylesheets/bundle.css",
    ],
    tsconfig: "tsconfig.json",
    entryNames: "[dir]/[name].[hash]",
    platform: "browser",
    outdir: "docs/assets",
};
//# sourceMappingURL=index.js.map